datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model agents {
  id                  String     @id
  strategy_id         BigInt
  metrics_id          String?
  retired             Boolean    @default(false)
  lookahead           Int
  lookbehind          Int
  perceptions_count   Int
  rules_count         Int
  perception_fns      Float[]
  antecedents         Float[]
  consequents         Float[]
  creation_begin_time BigInt?
  creation_end_time   BigInt?
  timestamp           BigInt
  metrics             metrics?   @relation(fields: [metrics_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  strategies          strategies @relation(fields: [strategy_id], references: [id], onUpdate: Restrict)
}

model article_history {
  id         BigInt   @id(map: "articleHistory_pkey") @default(autoincrement())
  article_id Int
  history_id BigInt
  changed    String?
  history    history  @relation(fields: [history_id], references: [id], onUpdate: Restrict, map: "articleHistory_historyId_fkey")
  articles   articles @relation(fields: [article_id], references: [id], onUpdate: Restrict)
}

model article_tags {
  id         Int      @id(map: "articleTags_pkey") @default(autoincrement())
  article_id Int
  tag_id     Int
  tags       tags     @relation(fields: [tag_id], references: [id], onUpdate: Restrict, map: "articleTags_tagId_fkey")
  articles   articles @relation(fields: [article_id], references: [id], onUpdate: Restrict)
}

model article_users {
  id         Int      @id(map: "articleUsers_pkey") @default(autoincrement())
  user_id    String   @db.VarChar
  article_id Int
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "articleUsers_userId_fkey")
  articles   articles @relation(fields: [article_id], references: [id], onUpdate: Restrict)
}

model articles {
  id              Int               @id @default(autoincrement())
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  status_id       Int
  category_id     Int
  title           String            @db.VarChar
  excerpt         String            @db.VarChar(320)
  body            String
  featured_image  String            @db.VarChar
  slug            String?           @db.VarChar
  categories      categories        @relation(fields: [category_id], references: [id], onUpdate: Restrict)
  status          status            @relation(fields: [status_id], references: [id], onUpdate: Restrict)
  article_history article_history[]
  article_tags    article_tags[]
  article_users   article_users[]
}

model broadcast_tags {
  id           BigInt     @id @default(autoincrement())
  broadcast_id BigInt
  tag_id       Int
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  broadcasts   broadcasts @relation(fields: [broadcast_id], references: [id], onUpdate: Restrict)
  tags         tags       @relation(fields: [tag_id], references: [id], onUpdate: Restrict)
}

model broadcasts {
  id             BigInt           @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  title          String           @db.VarChar(100)
  body           String
  category_id    Int?
  categories     categories?      @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  broadcast_tags broadcast_tags[]
}

model categories {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar
  articles   articles[]
  broadcasts broadcasts[]
}

model comments {
  id             BigInt        @id @default(autoincrement())
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  user_id        String        @db.VarChar
  user_signal_id BigInt?
  body           String
  is_open        Boolean?
  current_profit Decimal?      @db.Decimal
  users          users         @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  user_signals   user_signals? @relation(fields: [user_signal_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model environments {
  id                 BigInt               @id @default(autoincrement())
  name               String
  metrics_strategies metrics_strategies[]
}

model history {
  id              BigInt            @id @default(autoincrement())
  updated_by      String            @db.VarChar
  status_id       Int
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  status          status            @relation(fields: [status_id], references: [id], onUpdate: Restrict, map: "history_statusId_fkey")
  users           users             @relation(fields: [updated_by], references: [id], onUpdate: Restrict, map: "history_userUpdated_fkey")
  article_history article_history[]
}

model instruments {
  id            BigInt          @id @default(autoincrement())
  name          String
  strategies    strategies[]
  trade_metrics trade_metrics[]
}

model legal {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  title      String   @db.VarChar
  body       String
  slug       String?  @unique @db.VarChar
}

model methods {
  id         BigInt       @id @default(autoincrement())
  name       String
  strategies strategies[]
}

model metrics {
  id                                           String               @id
  begin_time                                   BigInt
  end_time                                     BigInt
  dataset_size                                 Int
  avg_revenue                                  Float
  avg_return                                   Float?
  total_return                                 Float?
  stdev_revenue                                Float
  total_revenue                                Float
  avg_max_pos                                  Float
  stdev_max_pos                                Float
  avg_max_neg                                  Float
  stdev_max_neg                                Float
  avg_tp                                       Float
  stdev_tp                                     Float
  avg_sl                                       Float
  avg_activation                               Float
  stdev_activation                             Float
  stdev_sl                                     Float
  max_tp                                       Float
  min_tp                                       Float
  max_sl                                       Float
  min_sl                                       Float
  trades_won                                   Int
  trades_lost                                  Int
  agents                                       agents[]
  metrics_strategies                           metrics_strategies[]
  signals_metricsTosignals_testing_metrics_id  signals[]            @relation("metricsTosignals_testing_metrics_id")
  signals_metricsTosignals_training_metrics_id signals[]            @relation("metricsTosignals_training_metrics_id")
  trades                                       trades[]
}

model metrics_strategies {
  metrics_id     String
  strategy_id    BigInt
  environment_id BigInt
  timestamp      BigInt
  environments   environments @relation(fields: [environment_id], references: [id], onUpdate: Restrict)
  metrics        metrics      @relation(fields: [metrics_id], references: [id], onUpdate: Restrict)
  strategies     strategies   @relation(fields: [strategy_id], references: [id], onUpdate: Restrict)

  @@id([metrics_id, strategy_id, environment_id])
}

model rates {
  time       BigInt
  instrument String
  timeframe  String
  complete   Boolean
  open_bid   Float
  open_ask   Float
  high_bid   Float
  high_ask   Float
  low_bid    Float
  low_ask    Float
  close_bid  Float
  close_ask  Float
  volume     Int

  @@id([time, instrument, timeframe])
}

model signal_metrics {
  id           Int       @id @default(autoincrement())
  wins         Int?
  losses       Int?
  total_return Float?
  avg_reward   Float?
  no_result    Int?
  buys         Int?
  sells        Int?
  date         DateTime? @db.Timestamptz(6)
}

model signals {
  id                                           String         @id
  trade_id                                     String
  strategy_id                                  BigInt
  training_metrics_id                          String
  testing_metrics_id                           String
  timestamp                                    BigInt
  strategies                                   strategies     @relation(fields: [strategy_id], references: [id], onUpdate: Restrict)
  metrics_metricsTosignals_testing_metrics_id  metrics        @relation("metricsTosignals_testing_metrics_id", fields: [testing_metrics_id], references: [id], onUpdate: Restrict)
  trades                                       trades         @relation(fields: [trade_id], references: [id], onUpdate: Restrict)
  metrics_metricsTosignals_training_metrics_id metrics        @relation("metricsTosignals_training_metrics_id", fields: [training_metrics_id], references: [id], onUpdate: Restrict)
  user_signals                                 user_signals[]
}

model status {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar
  articles articles[]
  history  history[]
}

model strategies {
  id                 BigInt               @id @default(autoincrement())
  instrument_id      BigInt
  timeframe_id       BigInt
  method_id          BigInt
  name               String?
  parameters         String?
  population         Float[]
  best_individual    Float[]
  iterations         BigInt               @default(0)
  instruments        instruments          @relation(fields: [instrument_id], references: [id], onUpdate: Restrict)
  methods            methods              @relation(fields: [method_id], references: [id], onUpdate: Restrict)
  timeframes         timeframes           @relation(fields: [timeframe_id], references: [id], onUpdate: Restrict)
  agents             agents[]
  metrics_strategies metrics_strategies[]
  signals            signals[]
}

model subscriptions {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar
  subtitle       String    @db.VarChar
  price          Decimal   @db.Decimal
  price_discount Decimal   @db.Decimal
  coupon         String    @db.VarChar
  stripe_id      String    @db.VarChar
  features       String
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  spots          Int?
}

model tags {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar
  article_tags   article_tags[]
  broadcast_tags broadcast_tags[]
}

model timeframes {
  id         BigInt       @id @default(autoincrement())
  name       String
  strategies strategies[]
}

model trade_metrics {
  id            Int         @id @default(autoincrement())
  instrument_id BigInt
  instruments   instruments @relation(fields: [instrument_id], references: [id], onUpdate: Restrict)
}

model trades {
  id          String    @id
  metrics_id  String?
  decision    String
  return      Float?
  revenue     Float?
  tp          Float
  sl          Float
  activation  Float
  entry_price Float
  exit_price  Float?
  entry_time  BigInt
  exit_time   BigInt?
  metrics     metrics?  @relation(fields: [metrics_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  signals     signals[]
}

model user_matty {
  id           Int    @id @default(autoincrement())
  date         String
  total_return Float
  wins         Int
  losses       Int
  user_id      String @db.VarChar
  avg_reward   Float?
  users        users  @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model user_metrics {
  id      Int     @id @default(autoincrement())
  user_id String? @unique @db.VarChar
  users   users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model user_settings {
  id      Int    @id(map: "userSettings_pkey") @default(autoincrement())
  user_id String @db.VarChar
}

model user_signals {
  id               BigInt     @id(map: "userSignals_pkey") @default(autoincrement())
  signal_id        String     @db.VarChar
  user_id          String     @db.VarChar
  created_at       DateTime   @default(now()) @db.Timestamptz(6)
  user_closed      Boolean    @default(false)
  user_entry_time  BigInt
  user_entry_price Float      @db.Real
  user_exit_time   BigInt?
  user_exit_price  Float?     @db.Real
  user_result      Float      @default(0) @db.Real
  user_rr          Float      @default(0)
  signals          signals    @relation(fields: [signal_id], references: [id], onUpdate: Restrict)
  users            users      @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  comments         comments[]
}

model users {
  id            String          @id @db.VarChar
  name          String          @db.VarChar
  username      String?         @db.VarChar
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  last_seen     DateTime?       @default(now()) @db.Timestamptz(6)
  role          String          @db.VarChar
  plan          String          @default("Free") @db.VarChar
  stripe_id     String?         @db.VarChar
  avatar        String?         @default("v1649821754/user/default/default_avatar_nmr1uu.png") @db.VarChar
  country       String?         @db.VarChar
  city          String?         @db.VarChar
  live_account  Boolean         @default(true)
  article_users article_users[]
  comments      comments[]
  history       history[]
  user_matty    user_matty[]
  user_metrics  user_metrics?
  user_signals  user_signals[]
}
